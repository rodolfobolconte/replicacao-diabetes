diferenca_acuracia(rf_data_ic, svm_data_ic)
diferenca_acuracia <- function(rf_dataset, svm_dataset) {
acc(rf_dataset$original, rf_dataset$previsao) - acc(svm_random$original, svm_random$previsao)
}
diferenca_acuracia(rf_data_ic, svm_data_ic)
diferenca_acuracia <- function(rf_dataset, svm_dataset) {
acc(rf_dataset$original, rf_dataset$previsao) - acc(svm_dataset$original, svm_dataset$previsao)
}
diferenca_acuracia(rf_data_ic, svm_data_ic)
#CALCULO DE THETA
diferenca_acuracia <- function(rf_dataset, indices, svm_dataset) {
rf_random = rf_dataset %>%
slice(indices)
svm_random = svm_dataset %>%
slice(indices)
acc(rf_random$original, rf_random$previsao) - acc(svm_random$original, svm_random$previsao)
}
# diferenca_acuracia <- function(rf_dataset, svm_dataset) {
#   acc(rf_dataset$original, rf_dataset$previsao) - acc(svm_dataset$original, svm_dataset$previsao)
# }
#FUNÇÃO QUE EXECUTA BOOTSTRAP E CALCULA THETA
ic = function(rf_dataset, svm_dataset) {
#GERAÇÃO DO BOOTSTRAP
resultado_bootstrap = boot(data = rf_dataset,
statistic = diferenca_acuracia,
R = 100,
svm_dataset=svm_dataset) %>%
tidy(conf.level = .95,
conf.method = "bca",
conf.int = TRUE)
resultado_bootstrap
}
ic(rf_data_ic, svm_data_ic)
#CALCULO DE THETA
acuracia <- function(dataset, indices) {
random = dataset %>%
slice(indices)
acc(random$original, random$previsao)
}
#FUNÇÃO QUE EXECUTA BOOTSTRAP E CALCULA THETA
ic_acuracia = function(dataset) {
#GERAÇÃO DO BOOTSTRAP
resultado_bootstrap = boot(data = dataset,
statistic = acuracia,
R = 2000) %>%
tidy(conf.level = .95,
conf.method = "bca",
conf.int = TRUE)
resultado_bootstrap
}
#CALCULO DE THETA
diferenca_acuracia <- function(rf_dataset, indices, svm_dataset) {
rf_random = rf_dataset %>%
slice(indices)
svm_random = svm_dataset %>%
slice(indices)
acc(rf_random$original, rf_random$previsao) - acc(svm_random$original, svm_random$previsao)
}
# diferenca_acuracia <- function(rf_dataset, svm_dataset) {
#   acc(rf_dataset$original, rf_dataset$previsao) - acc(svm_dataset$original, svm_dataset$previsao)
# }
#FUNÇÃO QUE EXECUTA BOOTSTRAP E CALCULA THETA
ic_diferenca_acuracia = function(rf_dataset, svm_dataset) {
#GERAÇÃO DO BOOTSTRAP
resultado_bootstrap = boot(data = rf_dataset,
statistic = diferenca_acuracia,
R = 2000,
svm_dataset=svm_dataset) %>%
tidy(conf.level = .95,
conf.method = "bca",
conf.int = TRUE)
resultado_bootstrap
}
ic(rf_data_ic, svm_data_ic)
ic_diferenca_acuracia(rf_data_ic, svm_data_ic)
#CALCULO DE THETA
diferenca_acuracia <- function(rf_dataset, indices, svm_dataset) {
rf_random = rf_dataset %>%
slice(indices)
svm_random = svm_dataset %>%
slice(indices)
acc(rf_random$original, rf_random$previsao) - acc(svm_random$original, svm_random$previsao)
}
#FUNÇÃO QUE EXECUTA BOOTSTRAP E CALCULA THETA
ic_diferenca_acuracia = function(rf_dataset, svm_dataset) {
#GERAÇÃO DO BOOTSTRAP
resultado_bootstrap = boot(data = rf_dataset,
statistic = diferenca_acuracia,
R = 2000,
svm_dataset=svm_dataset) %>%
tidy(conf.level = .95,
conf.method = "bca",
conf.int = TRUE)
resultado_bootstrap
}
ic_diferenca_acuracia(rf_data_ic, svm_data_ic)
#CALCULO DE THETA
acuracia <- function(dataset, indices) {
random = dataset %>%
slice(indices)
acc(random$original, random$previsao)
}
#FUNÇÃO QUE EXECUTA BOOTSTRAP E CALCULA THETA
ic_acuracia = function(dataset) {
#GERAÇÃO DO BOOTSTRAP
resultado_bootstrap = boot(data = dataset,
statistic = acuracia,
R = 2000) %>%
tidy(conf.level = .95,
conf.method = "bca",
conf.int = TRUE)
resultado_bootstrap
}
ic_acuracia(rf_data_ic)
ic_acuracia(svm_data_ic)
#CALCULO DE THETA
diferenca_acuracia <- function(rf_dataset, indices, svm_dataset) {
rf_random = rf_dataset %>%
slice(indices)
svm_random = svm_dataset %>%
slice(indices)
acc(rf_random$original, rf_random$previsao) - acc(svm_random$original, svm_random$previsao)
}
#FUNÇÃO QUE EXECUTA BOOTSTRAP E CALCULA THETA
ic_diferenca_acuracia = function(rf_dataset, svm_dataset) {
#GERAÇÃO DO BOOTSTRAP
resultado_bootstrap = boot(data = rf_dataset,
statistic = diferenca_acuracia,
R = 2000,
svm_dataset=svm_dataset) %>%
tidy(conf.level = .95,
conf.method = "bca",
conf.int = TRUE)
resultado_bootstrap
}
ic_diferenca_acuracia(rf_data_ic, svm_data_ic)
rf_ic = ic_acuracia(rf_data_ic)
svm_ic = ic_acuracia(svm_data_ic)
rf_ic
ggplot() +
geom_pointrange(rf_ic, aes(x=statistic, xmin=conf.low, xmax=conf.high, y=n()))
rf_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high, y=n())) +
geom_pointrange()
rf_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high, y=N())) +
geom_pointrange()
rf_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high, y=N)) +
geom_pointrange()
rf_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high)) +
geom_pointrange()
bind_rows(rf_ic, svm_ic)
bind_rows(rf_ic %>% mutate(modelo="Random Forest"), svm_ic %>% mutate(modelo="Support Vector Machine"))
models_data_ic = bind_rows(rf_ic %>% mutate(modelo="Random Forest"), svm_ic %>% mutate(modelo="Support Vector Machine"))
rf_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high, y=modelo)) +
geom_pointrange()
models_data_ic = bind_rows(rf_ic %>% mutate(modelo="Random Forest"), svm_ic %>% mutate(modelo="Support Vector Machine"))
models_data_ic
rf_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high, y=modelo)) +
geom_pointrange()
models_data_ic %>%
ggplot(aes(x=statistic, xmin=conf.low, xmax=conf.high, y=modelo)) +
geom_pointrange()
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic)) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=3) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=5)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.5)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.3)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="Intervalo de Confiança de Acurácia")
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
ylim("SVM", "RF")
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(limits=c("SVM", "RF"))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
ylim(c("SVM", "RF"))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
ylim("SVM", "RF")
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
theme(text=element_text(size=16)) +
ylim("SVM", "RF")
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
ylim("SVM", "RF")
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(limits = c("SVM", "RF"))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("SVM", "RF"))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine"))
ic_diferenca_acuracia(rf_data_ic, svm_data_ic) %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
diferenca_models_ic = ic_diferenca_acuracia(rf_data_ic, svm_data_ic)
diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
diferenca_models_ic %>%
ggplot(aes()) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector\nMachine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=240))
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x=NULL, y=NULL)
grid.arrange(diferenca_plot,
left = textGrob("Support Vector\nMachine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=240))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=180))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16), r=270))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16)))
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x=NULL, y=NULL) +
geom_vline(xintercept = 0)
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16)))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
geom_vline(xintercept = 0)
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x=NULL, y=NULL) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits=c(-1,1))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16)))
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.05) +
labs(x=NULL, y=NULL) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits=c(-1,1))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16)))
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.07) +
labs(x=NULL, y=NULL) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits=c(-1,1))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16)))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine"),
limits = c(-1,1)) +
geom_vline(xintercept = 0)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
scale_x_continuous(limits = c(-1,1))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
scale_x_continuous(limits = c(-1,1)) +
geom_vline(xintercept = 0) +
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
scale_x_continuous(limits = c(-1,1)) +
geom_vline(xintercept = 0)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
geom_vline(xintercept = 0)
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits = c(-1,1))
diferenca_plot = diferenca_models_ic %>%
ggplot(aes(y="")) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.07) +
labs(x=NULL, y=NULL) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits=c(-1,1))
grid.arrange(diferenca_plot,
left = textGrob("Support Vector Machine",
gp = gpar(fontsize=16), r=90),
right = textGrob("Random Forest",
gp = gpar(fontsize=16), r=270),
bottom = textGrob("Diferença de Acurácia entre Modelos",
gp = gpar(fontsize=16)))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.15) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits = c(0,1))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.1) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits = c(0,1))
models_data_ic %>%
ggplot(aes(y=modelo)) +
geom_point(aes(x=statistic), size=4) +
geom_errorbar(aes(xmin=conf.low, xmax=conf.high), width=.13) +
labs(x="\nIntervalo de Confiança de Acurácia", y="Modelos\n") +
theme(text=element_text(size=16)) +
scale_y_discrete(labels = c("Random\nForest", "Support Vector\nMachine")) +
geom_vline(xintercept = 0) +
scale_x_continuous(limits = c(0,1))
